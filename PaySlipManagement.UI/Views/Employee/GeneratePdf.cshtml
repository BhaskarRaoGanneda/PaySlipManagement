@{
    ViewData["Title"] = "Employee Details & PaySlips";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@model EmployeePayPeriodsViewModel

<div class="container mt-5">
    <ul class="nav nav-tabs " id="employeeTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <a class="nav-link active" id="employee-details-tab" data-bs-toggle="tab" href="#employee-details" role="tab" aria-controls="employee-details" aria-selected="true" style="color: #424242; font-weight: 500;">Employee Details</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="pay-periods-tab" data-bs-toggle="tab" href="#pay-periods" role="tab" aria-controls="pay-periods" aria-selected="false" style="color: #424242; font-weight: 500;">Pay Periods</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="ctc-breakdown-tab" data-bs-toggle="tab" href="#ctc-breakdown" role="tab" aria-controls="ctc-breakdown" aria-selected="false" style="color: #424242; font-weight: 500;">CTC BreakDown</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="holiday-calendar-tab" data-bs-toggle="tab" href="#holiday-calendar" role="tab" aria-controls="holiday-calendar" aria-selected="false" style="color: #424242; font-weight: 500;">Holiday Calendar</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="leaves-details-tab" data-bs-toggle="tab" href="#leaves-details" role="tab" aria-controls="leaves-details" aria-selected="false" style="color: #424242; font-weight: 500;">Leaves</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="apply-leave-tab" data-bs-toggle="tab" href="#apply-leave" role="tab" aria-controls="apply-leave" aria-selected="false" style="color: #424242; font-weight: 500;">Leaves Request</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="employee-tasks-tab" data-bs-toggle="tab" href="#employee-tasks" role="tab" aria-controls="employee-tasks" aria-selected="false" style="color: #424242; font-weight: 500;">Tasks</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="employee-regularization-tab" href="@Url.Action("SubmitRegularization", "EmployeeRegularization")" style="color: #424242; font-weight: 500;">
                Regularization
            </a>
        </li>
    </ul>

    <!-- Updated Styles for Tabs -->
    <style>
        .nav-tabs .nav-item {
            margin-right: 10px;
        }

        .nav-tabs .nav-link {
            border: none;
            border-bottom: 3px solid transparent;
            padding: 10px 15px;
            color: #424242;
            font-size: 1rem;
            font-weight: 500;
            background-color: transparent;
            transition: color 0.3s ease, border-bottom-color 0.3s ease;
        }

            .nav-tabs .nav-link.active {
                color: #ff9800;
                border-bottom: 3px solid #ff9800;
                background-color: transparent;
                font-weight: 600;
            }

            .nav-tabs .nav-link:hover {
                color: #ff9800;
                border-bottom: 3px solid #ff9800;
                background-color: transparent;
            }

        .nav-tabs {
            border-bottom: none;
        }

    </style>


    <div class="tab-content mt-4" id="employeeTabsContent">
        <!-- Employee Details Tab -->
        <div class="tab-pane fade show active" id="employee-details" role="tabpanel" aria-labelledby="employee-details-tab">
            <h2 class="employee-dashboard-heading">Employee Dashboard - @Model.Employee.EmployeeName</h2>
            <div class="card mb-4">
                <div class="card-header bg-dark-gray">
                    <h5 class="mb-0">Employee Details</h5>
                </div>
                <div class="card-body bg-light-gray">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <p class="text-muted"><strong>Employee Code:</strong> @Model.Employee.Emp_Code</p>
                            <p class="text-muted"><strong>Employee Name:</strong> @Model.Employee.EmployeeName</p>
                            <p class="text-muted"><strong>Department:</strong> @Model.Employee.DepartmentName</p>
                            <p class="text-muted"><strong>Designation:</strong> @Model.Employee.Designation</p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <p class="text-muted"><strong>Division:</strong> @Model.Employee.Division</p>
                            <p class="text-muted"><strong>Email:</strong> @Model.Employee.Email</p>
                            <p class="text-muted"><strong>PAN Number:</strong> @Model.Employee.PAN_Number</p>
                            <p class="text-muted"><strong>Joining Date:</strong> @Model.Employee.JoiningDate?.ToString("dd-MM-yyyy")</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Minimalist Styles -->
        <style>
            .employee-dashboard-heading {
                font-size: 1.6rem;
                color: #616161; /* Dark gray */
                font-weight: 500;
                margin-bottom: 20px;
                border-bottom: 2px solid #9e9e9e; /* Light gray underline */
                padding-bottom: 10px;
                text-align: left;
                letter-spacing: 0.5px;
            }

                .employee-dashboard-heading:hover {
                    color: #424242; /* Darker gray on hover */
                    border-bottom-color: #424242;
                    transition: color 0.3s ease, border-color 0.3s ease;
                }

            /* General card styles for modern and minimalistic feel */
            .card {
                border: none;
                border-radius: 12px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                transition: transform 0.2s ease, box-shadow 0.2s ease;
            }

                .card:hover {
                    transform: scale(1.01);
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }

            .bg-dark-gray {
                background-color: #424242; /* Dark gray */
                color: #fff; /* White text */
                border-radius: 12px 12px 0 0;
                padding: 15px;
                text-align: center;
                font-size: 1.25rem;
                font-weight: 500;
            }

            .bg-light-gray {
                background-color: #f5f5f5; /* Very light gray */
                padding: 20px;
                color: #424242; /* Dark gray text */
            }

            /* Typography */
            p {
                margin-bottom: 10px;
                color: #424242;
                font-size: 1rem;
                font-weight: 400;
            }

            .text-muted {
                color: #616161 !important;
                font-size: 0.95rem;
            }

            /* Remove excess margin and padding */
            h5 {
                margin-bottom: 0;
            }

        </style>




        <!-- Pay Periods Tab -->
        <div class="tab-pane fade" id="pay-periods" role="tabpanel" aria-labelledby="pay-periods-tab">
            <h3 class=" mb-3">Pay Periods</h3>
            <div class="row">
                @foreach (var payPeriod in Model.PayPeriods)
                {
                    <div class="card m-2" style="width: 18rem;">
                        <div class="card-body d-flex align-items-center">
                            <h5 class="card-title flex-grow-1">@payPeriod</h5>
                            <form asp-action="GenerateEmployeePdf" method="post" class="d-inline-flex mx-2 p-0">
                                <input type="hidden" name="empCode" value="@Model.Employee.Emp_Code" />
                                <input type="hidden" name="payPeriod" value="@payPeriod" />
                                <button type="submit" class="btn btn-primary mr-2"><i class="bi bi-file-earmark-arrow-down"></i></button>
                            </form>
                            <form asp-action="ViewEmployeePdf" method="post" class="d-inline-flex m-0 p-0" target="_blank">
                                <input type="hidden" name="empCode" value="@Model.Employee.Emp_Code" />
                                <input type="hidden" name="payPeriod" value="@payPeriod" />
                                <button type="submit" class="btn btn-secondary"><i class="bi bi-eye"></i></button>
                            </form>
                        </div>
                    </div>
                }
            </div>
        </div>
        <!-- CTC BreakDown Tab -->
        <div class="tab-pane fade" id="ctc-breakdown" role="tabpanel" aria-labelledby="ctc-breakdown-tab">
            <h4 class="mb-2">CTC BreakDown</h4>
            <div class="row">
                <div class="card m-2" style="width: 18rem;">
                    <div class="card-body d-flex align-items-center">
                        <h5 class="card-title flex-grow-1">@Model.Employee.EmployeeName</h5>
                        <form asp-action="GenerateEmployeeCTCPdf" method="post" class="d-inline-flex mx-2 p-0">
                            <input type="hidden" name="empCode" value="@Model.Employee.Emp_Code" />
                            <button type="submit" class="btn btn-primary mr-2"><i class="bi bi-file-earmark-arrow-down"></i></button>
                        </form>
                        <form asp-action="ViewEmployeeCTCPdf" method="post" class="d-inline-flex m-0 p-0" target="_blank">
                            <input type="hidden" name="empCode" value="@Model.Employee.Emp_Code" />
                            <button type="submit" class="btn btn-secondary"><i class="bi bi-eye"></i></button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <!-- Holiday Calendar Tab -->
        <div class="tab-pane fade" id="holiday-calendar" role="tabpanel" aria-labelledby="holiday-calendar-tab">
            @if (Model.Holiday.HolidayPdf != null)
            {
                <div class="d-flex justify-content-between">
                    <h6 class="mb-4">Latest Holiday Details</h6>
                    <a href="data:application/pdf;base64,@Convert.ToBase64String(Model.Holiday.HolidayPdf.Data)" class="text-orange" download="@Model.Holiday.HolidayPdf.FileName">@Model.Holiday.HolidayPdf.FileName</a>
                </div>
            }
            else
            {
                <p>No holiday PDF available.</p>
            }
            <br />
            @if (Model.Holiday.HolidayImage != null)
            {
                <img src="data:@Model.Holiday.HolidayImage.ContentType;base64,@Convert.ToBase64String(Model.Holiday.HolidayImage.ImageData)" alt="Holiday Image" class="holiday-image">
            }
            else
            {
                <p>No holiday image available.</p>
            }
        </div>
        <!-- Leaves Details Tab -->
        <div class="tab-pane fade" id="leaves-details" role="tabpanel" aria-labelledby="leaves-details-tab">

            <!-- Leave Information Section -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-dark-gray">
                    <h5 class="mb-0">Leave Information</h5>
                </div>
                <div class="card-body bg-light-gray">
                    <div class="row">
                        <!-- Total Leaves -->
                        <div class="col-md-4">
                            <div class="info-box">
                                <h6 class="text-secondary">Total Leaves</h6>
                                <p class="h5 text-dark-gray">@Model.Leaves.TotalLeaves</p>
                            </div>
                        </div>

                        <!-- Leave Balance -->
                        <div class="col-md-4">
                            <div class="info-box">
                                <h6 class="text-secondary">Leave Balance</h6>
                                <p class="h5 text-dark-gray">@Model.Leaves.LeavesAvailable</p>
                            </div>
                        </div>

                        <!-- Leaves Used -->
                        <div class="col-md-4">
                            <div class="info-box">
                                <h6 class="text-secondary">Leaves Used</h6>
                                <p class="h5 text-dark-gray">@Model.Leaves.LeavesUsed</p>
                            </div>
                        </div>
                    </div> <!-- End row -->
                </div> <!-- End card-body -->
            </div> <!-- End card -->
            <!-- Leave Requests (Approved) Section -->
            <div class="card shadow-sm">
                <div class="card-header bg-dark-gray">
                    <h5 class="mb-0">Approved Leave Requests</h5>
                </div>
                <div class="card-body bg-light-gray">
                    <table class="table table-striped">
                        <thead class="bg-medium-gray text-white">
                            <tr>
                                <th>Id</th>
                                <th>Employee Code</th>
                                <th>Leave Type</th>
                                <th>Reason</th>
                                <th>From Date</th>
                                <th>To Date</th>
                                <th>Leaves Count</th>
                                <th>Approval Person</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.LeaveRequests != null && Model.LeaveRequests.Any())
                            {
                                var approvedLeaveRequests = Model.LeaveRequests.Where(r => r.Status == "Approved");

                                if (approvedLeaveRequests.Any())
                                {
                                    foreach (var request in approvedLeaveRequests)
                                    {
                                        <tr>
                                            <td>@request.Id</td>
                                            <td>@request.Emp_Code</td>
                                            <td>@request.LeaveType</td>
                                            <td>@request.Reason</td>
                                            <td>@request.FromDate?.ToString("yyyy-MM-dd")</td>
                                            <td>@request.ToDate?.ToString("yyyy-MM-dd")</td>
                                            <td>@request.LeavesCount</td>
                                            <td>@request.ApprovalPerson</td>
                                            <td><span>@request.Status</span></td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="9" class="text-center">No approved leave requests available</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="9" class="text-center">No leave requests available</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div> <!-- End card-body -->
            </div> <!-- End card -->
        </div>

        <!-- CSS Styling -->
        <style>
            /* General card styles for consistency */
            .card {
                border: none;
                border-radius: 12px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                transition: transform 0.2s ease, box-shadow 0.2s ease;
            }

                .card:hover {
                    transform: scale(1.01);
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }
            /* Dark gray header styling */
            .bg-dark-gray {
                background-color: #424242; /* Dark gray */
                color: #fff;
                border-radius: 12px 12px 0 0;
                padding: 15px;
                text-align: center;
                font-size: 1.25rem;
                font-weight: 500;
            }
            /* Light gray body styling */
            .bg-light-gray {
                background-color: #f5f5f5; /* Light gray */
                padding: 20px;
                color: #424242;
            }
            /* Medium gray header for tables */
            .bg-medium-gray {
                background-color: #616161; /* Medium gray */
            }
            /* Typography */
            h6.text-secondary {
                color: #757575; /* Medium gray text */
            }

            p.h5.text-dark-gray {
                color: #424242; /* Dark gray text */
            }
            /* Table styles for consistent design */
            .table thead th {
                background-color: #616161; /* Medium gray */
                color: #fff; /* White text */
                font-weight: bold;
            }

            .table tbody tr:nth-child(even) {
                background-color: #e0e0e0; /* Alternate light gray */
            }

            .table tbody tr:hover {
                background-color: #d0d0d0; /* Slightly darker gray on hover */
            }

            .modal {
                display: none; /* Hidden by default */
                position: fixed;
                z-index: 1050;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                overflow: hidden;
                background-color: rgba(0, 0, 0, 0.5);
            }

            .modal-dialog {
                position: relative;
                margin: 10% auto;
                width: 400px;
            }

            .modal-content {
                background: #fff;
                border-radius: 4px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            }
        </style>

        <!-- Apply Leave Tab-->
        <div class="tab-pane fade" id="apply-leave" role="tabpanel" aria-labelledby="apply-leave-tab">
            <div class="d-flex justify-content-between align-items-center">
                <h4>Apply Leave</h4>
                <button type="button" class="btn btn-secondary" onclick="location.href='@Url.Action("Index1", "LeaveRequests")'">All Leave Requests</button>
            </div>
            <form asp-action="ApplyLeave" asp-controller="LeaveRequests" method="post">
                <div class="form-group">
                    <p><strong>Employee:</strong> @Model.Employee.EmployeeName</p>
                </div>
                <div class="form-group">
                    <label for="leaveType">Leave Type:</label>
                    <select id="leaveType" name="LeaveType" class="form-control">
                        <option value=" ">Select Leave Type</option>
                        <option value="Casual">Casual</option>
                        <option value="Sick">Sick</option>
                        <option value="Paternity">Paternity</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="fromDate">From:</label>
                    <input type="date" id="fromDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" name="FromDate" class="form-control" onchange="calculateTotalDays()" required />
                </div>
                <div class="form-group">
                    <label for="toDate">To:</label>
                    <input type="date" id="toDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" name="ToDate" class="form-control" onchange="calculateTotalDays()" required />
                </div>
                <div class="form-group">
                    <label for="totalDays">Total Days:</label>
                    <input type="text" id="totalDays" name="TotalDays" class="form-control" readonly />
                </div>
                <div class="form-group">
                    <label for="reason">Reason:</label>
                    <textarea id="reason" name="Reason" class="form-control"></textarea>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn-btn-primary">Submit Request</button>
                </div>
            </form>
        </div>

        <!-- Tasks Tab -->
        <div class="tab-pane fade" id="employee-tasks" role="tabpanel" aria-labelledby="employee-tasks-tab">
            <div class="d-flex justify-content-between align-items-center">
                <h4>Employee Tasks</h4>
                <button type="button" class="btn btn-secondary" onclick="location.href='@Url.Action("Index1", "Tasks")'">All Tasks</button>
            </div>
            <form asp-action="SubmitTasks" asp-controller="EmployeeTasks" method="post" id="taskform">
                @Html.AntiForgeryToken()
                <div class="form-group mt-3">
                    <div class="form-group">
                        <p><strong>Employee:</strong> @Model.Employee.EmployeeName</p>
                        <div class="form-group">
                            <label for="taskDate">TaskDate:</label>
                            <input type="date" id="taskDate" value="@DateTime.Now.ToString("yyyy-MM-dd")" name="TaskDate" class="form-control  d-inline-block w-auto" required />
                        </div>
                        @* <p>
                        <strong>Date:</strong>
                        <input type="date" class="form-control  d-inline-block w-auto " id="taskDate" name="TaskDate" value="@DateTime.Now.ToString("yyyy-MM-dd")" />
                        </p> *@
                    </div>
                    <table class="table table-striped table-bordered" id="taskTable">
                        <thead>
                            <tr>
                                <th>Task From</th>
                                <th>Task To</th>
                                <th>Task Description</th>
                                <th>Duration</th>
                                <th>Status</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="taskTableBody">
                            <tr>
                                <td>
                                    <input type="time" name="[0].TaskFrom" class="form-control"
                                           onchange="validateAndCalculate(this.closest('tr'))" id="taskFrom" />
                                </td>
                                <td>
                                    <input type="time" name="[0].TaskTo" class="form-control"
                                           onchange="validateAndCalculate(this.closest('tr'))" id="taskTo" />
                                </td>
                                <td>
                                    <input type="text" name="[0].TaskDescription" class="form-control" placeholder="Task Description" />
                                </td>
                                <td>
                                    <input type="text" name="[0].Duration" class="form-control" id="duration" placeholder="Duration" readonly />
                                </td>
                                <td>
                                    <select name="[0].Status" class="form-control">
                                        <option value="Pending">Pending</option>
                                        <option value="Completed">Completed</option>
                                        <option value="In Progress">In Progress</option>
                                    </select>
                                </td>
                                <td class="action-buttons">
                                    <button type="button" class="btn btn-success btn-sm mr-2" onclick="addTaskRow()">
                                        <i class="bi bi-plus-circle"></i>
                                    </button>
                                    @* <button type="button" class="btn btn-primary btn-sm mr-2" onclick="editTaskRow(this)">
                                    <i class="bi bi-pencil-square"></i>
                                    </button> *@
                                    <button type="button" class="btn btn-danger btn-sm mr-2" onclick="deleteTaskRow(this)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <!-- Validation Error Modal -->
                <div id="validationModal" class="modal" tabindex="-1" role="dialog">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Validation Error</h5>
                                @* <button type="button" class="close" onclick="closeValidationModal()" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                                </button> *@
                            </div>
                            <div class="modal-body">
                                <p class="text-danger">Task To time must be greater than Task From time. Please select a valid value.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" onclick="closeValidationModal()">OK</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group mt-3">
                    <button type="submit" class="btn btn-primary">Submit Tasks</button>
                </div>
            </form>
        </div>
      
        <script>
            // Show validation modal
            function showValidationModal() {
                const modal = document.getElementById("validationModal");
                modal.style.display = "block";
            }

            // Close validation modal
            function closeValidationModal() {
                const modal = document.getElementById("validationModal");
                modal.style.display = "none";
            }

            // Function to validate and calculate duration
            function validateAndCalculate(row) {
                const taskFromInput = row.querySelector('[id=taskFrom]');
                const taskToInput = row.querySelector('[id=taskTo]');
                const durationInput = row.querySelector('[id=duration]');

                const fromTime = taskFromInput?.value;
                const toTime = taskToInput?.value;

                // Validation logic
                if (fromTime && toTime) {
                    const [fromHours, fromMinutes] = fromTime.split(":").map(Number);
                    const [toHours, toMinutes] = toTime.split(":").map(Number);

                    const fromTotalMinutes = fromHours * 60 + fromMinutes;
                    const toTotalMinutes = toHours * 60 + toMinutes;

                    if (toTotalMinutes <= fromTotalMinutes) {
                        showValidationModal(); // Show custom modal
                        taskToInput.value = ""; // Clear the invalid value
                        durationInput.value = ""; // Clear the duration
                        return;
                    }

                    // Calculate duration
                    const durationMinutes = toTotalMinutes - fromTotalMinutes;
                    const hours = Math.floor(durationMinutes / 60);
                    const minutes = durationMinutes % 60;

                    durationInput.value = `${hours} hour${hours !== 1 ? 's' : ''} ${minutes} min`;
                } else {
                    durationInput.value = ""; // Clear duration if inputs are invalid
                }
            }

            // Function to dynamically add a new task row
            function addTaskRow() {
                const tableBody = document.getElementById("taskTableBody");
                const rowCount = tableBody.rows.length; // Get the current number of rows
                const newRow = document.createElement("tr");

                newRow.innerHTML = `
                                <td>
                                    <input type="time" name="[${rowCount}].TaskFrom" class="form-control" id="taskFrom"
                                           onchange="validateAndCalculate(this.closest('tr'))" />
                                </td>
                                <td>
                                    <input type="time" name="[${rowCount}].TaskTo" class="form-control" id="taskTo"
                                           onchange="validateAndCalculate(this.closest('tr'))" />
                                </td>
                                <td>
                                    <input type="text" name="[${rowCount}].TaskDescription" class="form-control" placeholder="Task Description" />
                                </td>
                                <td>
                                    <input type="text" name="[${rowCount}].Duration" class="form-control" id="duration" placeholder="Duration" readonly />
                                </td>
                                <td>
                                    <select name="[${rowCount}].Status" class="form-control">
                                        <option value="Pending">Pending</option>
                                        <option value="Completed">Completed</option>
                                        <option value="In Progress">In Progress</option>
                                    </select>
                                </td>
                                <td class="action-buttons">
                                    <button type="button" class="btn btn-success btn-sm mr-2" onclick="addTaskRow()">
                                        <i class="bi bi-plus-circle"></i>
                                    </button>
                                    <button type="button" class="btn btn-danger btn-sm mr-2" onclick="deleteTaskRow(this)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            `;

                // Append the new row to the table body
                tableBody.appendChild(newRow);
            }
            // Edit a task row
            function editTaskRow(button) {
                const row = button.closest("tr");
                const inputs = row.querySelectorAll("input, select");
                inputs.forEach(input => {
                    input.disabled = !input.disabled; // Toggle editable state
                });
                button.innerHTML = inputs[0].disabled
                    ? '<i class="bi bi-pencil-square"></i>'
                    : '<i class="bi bi-check-circle"></i>';
            }

            // Delete a task row
            function deleteTaskRow(button) {
                const row = button.closest("tr");
                row.remove();
            }
        </script>
    </div>
</div>


<script>
    function calculateTotalDays() {
        var fromDate = document.getElementById("fromDate").value;
        var toDate = document.getElementById("toDate").value;

        // Parse dates
        var fromDateParts = fromDate.split("-");
        var toDateParts = toDate.split("-");
        var fromDateDate = new Date(fromDateParts[0], fromDateParts[1] - 1, fromDateParts[2]);
        var toDateDate = new Date(toDateParts[0], toDateParts[1] - 1, toDateParts[2]);

        var totalDays = 0;

        // Loop through each day from the start to end date
        for (var date = new Date(fromDateDate); date <= toDateDate; date.setDate(date.getDate() + 1)) {
            var dayOfWeek = date.getDay();

            // Skip weekends (0 = Sunday, 6 = Saturday)
            if (dayOfWeek !== 0 && dayOfWeek !== 6) {
                totalDays++;
            }
        }

        // Update the total days element with the calculated value
        document.getElementById("totalDays").value = totalDays;
    }

    // Set minimum "To Date" based on selected "From Date"
    document.getElementById("fromDate").addEventListener("change", function () {
        const fromDateValue = this.value;
        const toDateInput = document.getElementById("toDate");

        // Set the "min" attribute of "To Date" to the selected "From Date"
        toDateInput.min = fromDateValue;
    });

</script>


<!-- Custom Styles -->
<style>
    .card {
        border-radius: 10px;
    }

    .card-header {
        font-size: 1.25rem;
    }

    .btn-outline-primary {
        transition: transform 0.2s;
    }

        .btn-outline-primary:hover {
            transform: scale(1.05);
        }

    .card .btn {
        margin: 0;
    }

    .holiday-image {
        max-width: 100%;
        height: auto;
        display: block;
        margin: 0 auto 10px;
    }

    #apply-leave {
        max-width: 600px; /* adjust the width as needed */
        margin: 20px auto;
        padding: 20px;
        background-color: #f9f9f9; /* light gray background */
        border: 1px solid #ddd; /* light gray border */
        border-radius: 10px; /* rounded corners */
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* subtle shadow */
    }

        #apply-leave h4 {
            font-size: 16px;
            margin-bottom: 10px;
            color: #337ab7; /* blue color for header */
        }

        #apply-leave .form-group {
            margin-bottom: 10px;
        }

        #apply-leave label {
            font-size: 14px;
            font-weight: normal;
            color: #666; /* dark gray color for labels */
        }

        #apply-leave .form-control {
            font-size: 14px;
            padding: 5px;
            border: 1px solid #ccc; /* light gray border */
            border-radius: 5px; /* rounded corners */
            width: 100%;
        }

        #apply-leave button[type="submit"] {
            background-color: #4CAF50; /* green color for submit button */
            color: #fff; /* white text color */
            padding: 10px 20px;
            border: none;
            border-radius: 5px; /* rounded corners */
            cursor: pointer;
        }

            #apply-leave button[type="submit"]:hover {
                background-color: #3e8e41; /* darker green color on hover */
            }
</style>
